import streamlit as st
import json
import pandas as pd
from datetime import datetime
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="JSONL Viewer",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def load_jsonl_file(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSONL —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"""
    records = []
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            for line_num, line in enumerate(file, 1):
                line = line.strip()
                if line:
                    try:
                        record = json.loads(line)
                        record['_line_number'] = line_num
                        records.append(record)
                    except json.JSONDecodeError as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
                        continue
        return records
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return []

def format_timestamp(timestamp_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        dt = datetime.fromisoformat(timestamp_str.replace('Z', '+00:00'))
        return dt.strftime("%d.%m.%Y %H:%M:%S")
    except:
        return timestamp_str

def display_record(record, index):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    st.markdown(f"---")
    st.markdown(f"### üìã –ó–∞–ø–∏—Å—å #{index + 1} (—Å—Ç—Ä–æ–∫–∞ {record.get('_line_number', 'N/A')})")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.markdown("#### üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        if 'timestamp' in record:
            st.write(f"**–í—Ä–µ–º—è:** {format_timestamp(record['timestamp'])}")
        
        # –¢–∏–ø –∑–∞–ø–∏—Å–∏
        if 'type' in record:
            st.write(f"**–¢–∏–ø:** {record['type']}")
        
        # –°—Ç–∞—Ç—É—Å
        if 'status' in record:
            status_color = "üü¢" if record['status'] == 'success' else "üî¥"
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {status_color} {record['status']}")
        
        # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if 'processing_time_seconds' in record:
            st.write(f"**–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** {record['processing_time_seconds']:.2f} —Å–µ–∫")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if 'response' in record and 'sources_count' in record['response']:
            st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤:** {record['response']['sources_count']}")
        
        # –û—à–∏–±–∫–∞
        if 'error' in record and record['error']:
            st.error(f"**–û—à–∏–±–∫–∞:** {record['error']}")
    
    with col2:
        st.markdown("#### üí¨ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        
        # –ó–∞–ø—Ä–æ—Å
        if 'request' in record:
            st.markdown("**–ó–∞–ø—Ä–æ—Å:**")
            if 'question' in record['request']:
                st.info(record['request']['question'])
            else:
                st.json(record['request'])
        
        # –û—Ç–≤–µ—Ç
        if 'response' in record:
            st.markdown("**–û—Ç–≤–µ—Ç:**")
            if 'answer' in record['response']:
                st.markdown(record['response']['answer'])
            else:
                st.json(record['response'])
    
    # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if 'response' in record and 'sources_payload' in record['response']:
        st.markdown("#### üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
        sources = record['response']['sources_payload']
        
        for i, source in enumerate(sources):
            with st.expander(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i+1}: {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source.get('score', 0):.2f})", expanded=False):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.markdown("**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**")
                    st.text(source.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ'))
                
                with col2:
                    st.markdown("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                    metadata = source.get('metadata', {})
                    if metadata:
                        st.write(f"**–§–∞–π–ª:** {metadata.get('file_path', 'N/A')}")
                        st.write(f"**–†–∞–∑–º–µ—Ä:** {metadata.get('file_size', 'N/A')} –±–∞–π—Ç")
                        st.write(f"**–ß–∞–Ω–∫:** {metadata.get('chunk_id', 'N/A')} –∏–∑ {metadata.get('total_chunks', 'N/A')}")
                        st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {metadata.get('source', 'N/A')}")

def main():
    st.title("üìÑ JSONL Viewer")
    st.markdown("–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ JSONL —Ñ–∞–π–ª–æ–≤ —Å —É–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    file_path = st.sidebar.text_input(
        "–ü—É—Ç—å –∫ JSONL —Ñ–∞–π–ª—É:",
        value="backend/data/logs/qa_logs.jsonl",
        help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ JSONL —Ñ–∞–π–ª—É"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    if st.sidebar.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", type="primary"):
        if file_path and os.path.exists(file_path):
            st.session_state.file_path = file_path
            st.session_state.records = load_jsonl_file(file_path)
            st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(st.session_state.records)} –∑–∞–ø–∏—Å–µ–π")
        else:
            st.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å.")
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if 'records' in st.session_state and st.session_state.records:
        statuses = list(set(record.get('status', 'unknown') for record in st.session_state.records))
        selected_status = st.sidebar.selectbox("–°—Ç–∞—Ç—É—Å:", ['–í—Å–µ'] + statuses)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        types = list(set(record.get('type', 'unknown') for record in st.session_state.records))
        selected_type = st.sidebar.selectbox("–¢–∏–ø:", ['–í—Å–µ'] + types)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        min_time = st.sidebar.number_input("–ú–∏–Ω. –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫):", min_value=0.0, value=0.0)
        max_time_input = st.sidebar.number_input("–ú–∞–∫—Å. –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫):", min_value=0.0, value=1000.0, 
                                               help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞")
        max_time = max_time_input if max_time_input > 0 else float('inf')
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filtered_records = st.session_state.records.copy()
        
        if selected_status != '–í—Å–µ':
            filtered_records = [r for r in filtered_records if r.get('status') == selected_status]
        
        if selected_type != '–í—Å–µ':
            filtered_records = [r for r in filtered_records if r.get('type') == selected_type]
        
        filtered_records = [r for r in filtered_records 
                          if min_time <= r.get('processing_time_seconds', 0) and 
                          (max_time == float('inf') or r.get('processing_time_seconds', 0) <= max_time)]
        
        st.session_state.filtered_records = filtered_records
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if 'filtered_records' in st.session_state and st.session_state.filtered_records:
        records = st.session_state.filtered_records
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(records))
        with col2:
            success_count = len([r for r in records if r.get('status') == 'success'])
            st.metric("–£—Å–ø–µ—à–Ω—ã—Ö", success_count)
        with col3:
            avg_time = sum(r.get('processing_time_seconds', 0) for r in records) / len(records)
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{avg_time:.2f} —Å–µ–∫")
        with col4:
            total_sources = sum(r.get('response', {}).get('sources_count', 0) for r in records)
            st.metric("–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", total_sources)
        
        st.divider()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
        st.subheader(f"üìã –ó–∞–ø–∏—Å–∏ ({len(records)} –∏–∑ {len(st.session_state.records)})")
        
        # –û–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_mode = st.radio(
            "–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            ["–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π", "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π", "–¢–∞–±–ª–∏—Ü–∞"],
            horizontal=True
        )
        
        if display_mode == "–¢–∞–±–ª–∏—Ü–∞":
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            table_data = []
            for record in records:
                row = {
                    '‚Ññ': record.get('_line_number', 'N/A'),
                    '–í—Ä–µ–º—è': format_timestamp(record.get('timestamp', '')),
                    '–¢–∏–ø': record.get('type', ''),
                    '–°—Ç–∞—Ç—É—Å': record.get('status', ''),
                    '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫)': f"{record.get('processing_time_seconds', 0):.2f}",
                    '–í–æ–ø—Ä–æ—Å': record.get('request', {}).get('question', '')[:100] + '...' if len(record.get('request', {}).get('question', '')) > 100 else record.get('request', {}).get('question', ''),
                    '–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤': record.get('response', {}).get('sources_count', 0),
                    '–ï—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤': '–î–∞' if record.get('response', {}).get('sources_payload') else '–ù–µ—Ç'
                }
                table_data.append(row)
            
            df = pd.DataFrame(table_data)
            st.dataframe(df, use_container_width=True)
            
        else:
            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∏–ª–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            for i, record in enumerate(records):
                if display_mode == "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π":
                    # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    st.markdown(f"---")
                    col1, col2, col3 = st.columns([1, 2, 1])
                    
                    with col1:
                        st.write(f"**#{i + 1}**")
                        st.write(f"**{format_timestamp(record.get('timestamp', ''))}**")
                        status_color = "üü¢" if record.get('status') == 'success' else "üî¥"
                        st.write(f"{status_color} {record.get('status', '')}")
                    
                    with col2:
                        question = record.get('request', {}).get('question', '')
                        st.write(f"**–í–æ–ø—Ä–æ—Å:** {question[:100]}{'...' if len(question) > 100 else ''}")
                        answer = record.get('response', {}).get('answer', '')
                        st.write(f"**–û—Ç–≤–µ—Ç:** {answer[:150]}{'...' if len(answer) > 150 else ''}")
                    
                    with col3:
                        st.write(f"**{record.get('processing_time_seconds', 0):.2f} —Å–µ–∫**")
                        st.write(f"**{record.get('response', {}).get('sources_count', 0)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤**")
                        if record.get('response', {}).get('sources_payload'):
                            st.write("üìö **–î–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤**")
                else:
                    # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º
                    display_record(record, i)
    
    elif 'records' in st.session_state and not st.session_state.records:
        st.warning("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö JSON –∑–∞–ø–∏—Å–µ–π")
    
    else:
        st.info("üëà –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()
