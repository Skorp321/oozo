import streamlit as st
import os
from langchain_openai import ChatOpenAI
from langchain.schema import HumanMessage, SystemMessage
import tempfile
import io
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤ –≤—Å—Ç—Ä–µ—á–∏",
    page_icon="üìù",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
        font-size: 2.5rem;
    }
    
    .description-box {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 10px;
        margin: 2rem 0;
        border-left: 4px solid #007bff;
    }
    
    .upload-section {
        background-color: #e3f2fd;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .summary-container {
        background-color: #f5f5f5;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #4caf50;
    }
    
    .streaming-text {
        font-family: 'Courier New', monospace;
        background-color: white;
        padding: 1rem;
        border-radius: 5px;
        border: 1px solid #dee2e6;
        min-height: 200px;
        max-height: 500px;
        overflow-y: auto;
    }
    
    .download-button {
        background-color: #28a745;
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-top: 1rem;
    }
    
    .download-button:hover {
        background-color: #218838;
    }
    
    .stButton > button {
        border-radius: 10px;
        background-color: #007bff;
        color: white;
        border: none;
        height: 44px;
        font-weight: bold;
    }
    
    .stButton > button:hover {
        background-color: #0056b3;
    }
    
    .file-uploader {
        border: 2px dashed #007bff;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background-color: #f8f9fa;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ */
    .stRadio > div {
        margin-bottom: 1rem;
    }
    
    .stRadio > div > label {
        font-weight: 500;
        color: #333;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ */
    .stAlert {
        border-radius: 8px;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if "summary_text" not in st.session_state:
        st.session_state.summary_text = ""
    if "is_processing" not in st.session_state:
        st.session_state.is_processing = False
    if "file_uploaded" not in st.session_state:
        st.session_state.file_uploaded = False
    if "uploaded_file_content" not in st.session_state:
        st.session_state.uploaded_file_content = ""
    if "selected_prompt" not in st.session_state:
        st.session_state.selected_prompt = "meeting_summary"

def read_file_content(uploaded_file):
    """–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
        file_extension = uploaded_file.name.lower().split('.')[-1]
        
        if file_extension in ['txt', 'md']:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            content = uploaded_file.read().decode('utf-8')
        elif file_extension in ['docx', 'doc']:
            # Word –¥–æ–∫—É–º–µ–Ω—Ç—ã
            import docx
            doc = docx.Document(uploaded_file)
            content = '\n'.join([paragraph.text for paragraph in doc.paragraphs])
        elif file_extension == 'pdf':
            # PDF —Ñ–∞–π–ª—ã
            import PyPDF2
            pdf_reader = PyPDF2.PdfReader(uploaded_file)
            content = ""
            for page in pdf_reader.pages:
                content += page.extract_text() + "\n"
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            content = uploaded_file.read().decode('utf-8', errors='ignore')
        
        return content.strip()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def get_system_prompts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    prompts = {
        "meeting_summary": {
            "name": "üìù –°–≤–æ–¥–∫–∞ –≤—Å—Ç—Ä–µ—á–∏",
            "description": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å —Ç–µ–º–∞–º–∏, —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏",
            "prompt": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤ –≤—Å—Ç—Ä–µ—á. 
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å —á–µ—Ç–∫—É—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —Å–≤–æ–¥–∫—É –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–æ–¥–∫–∏ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
    1. **–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è** - –∫–ª—é—á–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ç–µ–º—ã
    2. **–ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∏—Ö –¥–µ—Ç–∞–ª–∏
    3. **–ü–æ—Ä—É—á–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏** - –∫—Ç–æ –∏ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å
    4. **–°—Ä–æ–∫–∏** - –≤–∞–∂–Ω—ã–µ –¥–∞—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã
    5. **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏** - –ø–ª–∞–Ω –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    
    –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º.
    –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —á–µ—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Å—Ç—Ä–µ—á–∏, —Å–æ–∑–¥–∞–π –ª–æ–≥–∏—á–Ω—É—é —Å–≤–æ–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–µ–π—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    
    –í–ê–ñ–ù–û: 
    - –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π JSON –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Markdown (# –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, ## –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    - –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        },
        "action_items": {
            "name": "‚úÖ –ü—É–Ω–∫—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π",
            "description": "–§–æ–∫—É—Å –Ω–∞ –∑–∞–¥–∞—á–∞—Ö, –ø–æ—Ä—É—á–µ–Ω–∏—è—Ö –∏ —Å—Ä–æ–∫–∞—Ö",
            "prompt": """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –ø—É–Ω–∫—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –≤—Å—Ç—Ä–µ—á.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏, –ø–æ—Ä—É—á–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
    1. **–ü–æ—Ä—É—á–µ–Ω–∏—è** - –∫—Ç–æ –∏ —á—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å
    2. **–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è** - –¥–∞—Ç—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã
    3. **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã** - –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á
    4. **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏** - —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ —á–µ–º
    5. **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ** - –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: "**–ö—Ç–æ:** –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å - **–°—Ä–æ–∫:** –¥–∞—Ç–∞ - **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π"
    –í—ã–¥–µ–ª—è–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    
    –í–ê–ñ–ù–û: 
    - –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π JSON –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Markdown (# –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, ## –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    - –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        },
        "key_decisions": {
            "name": "üéØ –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è",
            "description": "–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –∏—Ö –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
            "prompt": """–¢—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä–µ—à–µ–Ω–∏–π, –ø—Ä–∏–Ω—è—Ç—ã—Ö –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
    1. **–ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è** - —á—Ç–æ –±—ã–ª–æ —Ä–µ—à–µ–Ω–æ
    2. **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ** - –ø–æ—á–µ–º—É –ø—Ä–∏–Ω—è—Ç–æ —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    3. **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã** - –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏—Å—å
    4. **–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è** - —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    5. **–†–∏—Å–∫–∏** - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∏—Ö –º–∏—Ç–∏–≥–∞—Ü–∏—è
    
    –ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥. –í—ã–¥–µ–ª—è–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.
    
    –í–ê–ñ–ù–û: 
    - –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π JSON –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Markdown (# –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, ## –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    - –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        },
        "minutes": {
            "name": "üìã –ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏",
            "description": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–µ–π –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
            "prompt": """–¢—ã - —Å–µ–∫—Ä–µ—Ç–∞—Ä—å, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–µ–π –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
    1. **–£—á–∞—Å—Ç–Ω–∏–∫–∏** - –∫—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ
    2. **–ü–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è** - —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–æ—Å—å –æ–±—Å—É–¥–∏—Ç—å
    3. **–•–æ–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è** - –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ –≤—Å—Ç—Ä–µ—á–∞
    4. **–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è** - –∫–ª—é—á–µ–≤—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    5. **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã** - –∏—Ç–æ–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –ø–æ–≤–µ—Å—Ç–∫–∏
    
    –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞. –°–æ—Ö—Ä–∞–Ω—è–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é.
    
    –í–ê–ñ–ù–û: 
    - –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
    - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π JSON –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Markdown (# –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, ## –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    - –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        }
    }
    return prompts

def create_summary_prompt(content, prompt_type="meeting_summary"):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    prompts = get_system_prompts()
    
    if prompt_type not in prompts:
        prompt_type = "meeting_summary"
    
    system_prompt = prompts[prompt_type]["prompt"]
    
    user_prompt = f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π {prompts[prompt_type]['name'].lower()} –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏:

{content}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown, –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. 

–í–ê–ñ–ù–û: 
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π JSON –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ Markdown (# –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞, ## –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å–ø–∏—Å–∫–æ–≤"""
    
    return system_prompt, user_prompt

def stream_summary(llm, system_prompt, user_prompt):
    """–ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏"""
    messages = [
        SystemMessage(content=system_prompt),
        HumanMessage(content=user_prompt)
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    text_container = st.empty()
    full_response = ""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ—Ç–æ–∫–æ–≤–æ
    for chunk in llm.stream(messages):
        if chunk.content:
            full_response += chunk.content
            if ('<think>' in full_response) and ('</think>' not in full_response):
                continue
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º markdown
            display_text = full_response.split('</think>')[-1] if '</think>' in full_response else full_response
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            display_text = clean_markdown_text(display_text)
            text_container.markdown(display_text + "‚ñã")
    
    # –û—á–∏—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω—Ü–µ
    final_text = full_response.split('</think>')[-1] if '</think>' in full_response else full_response
    final_text = clean_markdown_text(final_text)
    text_container.markdown(final_text)
    
    return final_text

def clean_markdown_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not text:
        return text
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
    lines = text.split('\n')
    cleaned_lines = []
    
    for line in lines:
        stripped_line = line.strip()
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if stripped_line.startswith('**#') and stripped_line.endswith('**'):
            # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–∏—à–Ω–∏–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            cleaned_line = stripped_line[2:-2]  # –£–±–∏—Ä–∞–µ–º ** –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        elif stripped_line.startswith('**##') and stripped_line.endswith('**'):
            # –≠—Ç–æ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–∏—à–Ω–∏–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            cleaned_line = stripped_line[2:-2]  # –£–±–∏—Ä–∞–µ–º ** –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        elif stripped_line.startswith('**###') and stripped_line.endswith('**'):
            # –≠—Ç–æ –ø–æ–¥–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–∏—à–Ω–∏–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            cleaned_line = stripped_line[2:-2]  # –£–±–∏—Ä–∞–µ–º ** –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        elif stripped_line.startswith('**####') and stripped_line.endswith('**'):
            # –≠—Ç–æ –ø–æ–¥–ø–æ–¥–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–∏—à–Ω–∏–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            cleaned_line = stripped_line[2:-2]  # –£–±–∏—Ä–∞–µ–º ** –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        elif stripped_line.startswith('**####') and stripped_line.endswith('**'):
            # –≠—Ç–æ –ø–æ–¥–ø–æ–¥–ø–æ–¥–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–∏—à–Ω–∏–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            cleaned_line = stripped_line[2:-2]  # –£–±–∏—Ä–∞–µ–º ** –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        elif stripped_line.startswith('**#####') and stripped_line.endswith('**'):
            # –≠—Ç–æ –ø–æ–¥–ø–æ–¥–ø–æ–¥–ø–æ–¥–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–∏—à–Ω–∏–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            cleaned_line = stripped_line[2:-2]  # –£–±–∏—Ä–∞–µ–º ** –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        elif stripped_line.startswith('**######') and stripped_line.endswith('**'):
            # –≠—Ç–æ –ø–æ–¥–ø–æ–¥–ø–æ–¥–ø–æ–¥–ø–æ–¥–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ª–∏—à–Ω–∏–º–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            cleaned_line = stripped_line[2:-2]  # –£–±–∏—Ä–∞–µ–º ** –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        else:
            cleaned_line = line
        
        cleaned_lines.append(cleaned_line)
    
    return '\n'.join(cleaned_lines)

def download_summary_as_txt(summary_text, prompt_type="meeting_summary"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    prompts = get_system_prompts()
    type_name = prompts.get(prompt_type, prompts["meeting_summary"])["name"]
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
    filename = f"{type_name.replace(' ', '_').replace('üìù', '').replace('‚úÖ', '').replace('üéØ', '').replace('üìã', '').strip()}_{timestamp}.txt"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    buffer = io.StringIO()
    buffer.write(f"{type_name.upper()}\n")
    buffer.write("=" * 50 + "\n\n")
    buffer.write(summary_text)
    buffer.write(f"\n\n–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
    
    return buffer.getvalue(), filename

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    initialize_session_state()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    if st.session_state.is_processing:
        prompts = get_system_prompts()
        selected_type_name = prompts[st.session_state.selected_prompt]["name"]
        st.markdown(f'<h1 class="main-header">üîÑ –°–æ–∑–¥–∞–Ω–∏–µ {selected_type_name.lower()}</h1>', unsafe_allow_html=True)
    elif st.session_state.summary_text:
        st.markdown('<h1 class="main-header">üìù –°–µ—Ä–≤–∏—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤ –≤—Å—Ç—Ä–µ—á–∏</h1>', unsafe_allow_html=True)
    else:
        st.markdown('<h1 class="main-header">üìù –°–µ—Ä–≤–∏—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤ –≤—Å—Ç—Ä–µ—á–∏</h1>', unsafe_allow_html=True)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    if not st.session_state.is_processing and not st.session_state.summary_text:
        st.markdown("""
        <div class="description-box">
            <h2>–û —Å–µ—Ä–≤–∏—Å–µ</h2>
            <p>–≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –ª—é–±–æ–π –≤—Å—Ç—Ä–µ—á–∏. 
            –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∏, –∏ –Ω–∞—à –ò–ò —Å–æ–∑–¥–∞—Å—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É, –≤–∫–ª—é—á–∞—é—â—É—é:</p>
            <ul>
                <li>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è</li>
                <li>–ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è</li>
                <li>–ü–æ—Ä—É—á–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏</li>
                <li>–°—Ä–æ–∫–∏ –∏ –¥–µ–¥–ª–∞–π–Ω—ã</li>
                <li>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏</li>
            </ul>
            <p><strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</strong> TXT, DOCX, PDF, MD</p>
        </div>
        """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    with st.sidebar:
        st.markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
        
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª",
            type=['txt', 'docx', 'pdf', 'md'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã TXT, DOCX, PDF, MD"
        )
        
        if uploaded_file is not None:
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.session_state.file_uploaded = True
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            if not st.session_state.uploaded_file_content:
                with st.spinner("–ß–∏—Ç–∞—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞..."):
                    content = read_file_content(uploaded_file)
                    if content:
                        st.session_state.uploaded_file_content = content
                        st.info(f"üìÑ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–∞
        st.markdown("### üéØ –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞")
        st.markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        prompts = get_system_prompts()
        prompt_options = {prompts[key]["name"]: key for key in prompts.keys()}
        
        selected_prompt_name = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            options=list(prompt_options.keys()),
            index=list(prompt_options.keys()).index(prompts[st.session_state.selected_prompt]["name"]),
            help="–†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        st.session_state.selected_prompt = prompt_options[selected_prompt_name]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        selected_prompt_info = prompts[st.session_state.selected_prompt]
        st.info(f"**{selected_prompt_info['name']}**\n{selected_prompt_info['description']}")
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.session_state.file_uploaded and st.session_state.uploaded_file_content:
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True):
                st.session_state.is_processing = True
                st.session_state.summary_text = ""
                st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    if st.session_state.is_processing and st.session_state.uploaded_file_content:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.markdown("### üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        openai_api_key = st.secrets.get("OPENAI_API_KEY")
        if not openai_api_key:
            st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á OpenAI. –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ —Å–µ–∫—Ä–µ—Ç—ã Streamlit.")
            st.session_state.is_processing = False
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
            llm = ChatOpenAI(
                openai_api_base="https://10f9698e-46b7-4a33-be37-f6495989f01f.modelrun.inference.cloud.ru/v1",
                model="library/qwen3:32b",
                temperature=0.3,
                streaming=True,
                openai_api_key='EMPTY'
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º
            system_prompt, user_prompt = create_summary_prompt(
                st.session_state.uploaded_file_content, 
                st.session_state.selected_prompt
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
            prompts = get_system_prompts()
            selected_type_name = prompts[st.session_state.selected_prompt]["name"]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with st.spinner(f"–°–æ–∑–¥–∞—é {selected_type_name.lower()}..."):
                summary = stream_summary(llm, system_prompt, user_prompt)
                st.session_state.summary_text = summary
            
            st.session_state.is_processing = False
            st.success(f"‚úÖ {selected_type_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            st.rerun()
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
            st.session_state.is_processing = False
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if st.session_state.summary_text and not st.session_state.is_processing:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
        prompts = get_system_prompts()
        selected_type_name = prompts[st.session_state.selected_prompt]["name"]
        
        st.markdown(f"### üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {selected_type_name}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        st.markdown(st.session_state.summary_text)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        summary_content, filename = download_summary_as_txt(st.session_state.summary_text, st.session_state.selected_prompt)
        
        st.download_button(
            label="üíæ –°–∫–∞—á–∞—Ç—å –≤ TXT —Ñ–æ—Ä–º–∞—Ç–µ",
            data=summary_content,
            file_name=filename,
            mime="text/plain",
            use_container_width=True
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", use_container_width=True):
            st.session_state.summary_text = ""
            st.session_state.uploaded_file_content = ""
            st.session_state.file_uploaded = False
            st.rerun()

if __name__ == "__main__":
    main()
